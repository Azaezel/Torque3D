
/*  A Bison parser, made from cmdgram.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse CMDparse
#define yylex CMDlex
#define yyerror CMDerror
#define yylval CMDlval
#define yychar CMDchar
#define yydebug CMDdebug
#define yynerrs CMDnerrs
#define	rwDEFINE	258
#define	rwENDDEF	259
#define	rwDECLARE	260
#define	rwDECLARESINGLETON	261
#define	rwBREAK	262
#define	rwELSE	263
#define	rwCONTINUE	264
#define	rwGLOBAL	265
#define	rwIF	266
#define	rwNIL	267
#define	rwRETURN	268
#define	rwWHILE	269
#define	rwDO	270
#define	rwENDIF	271
#define	rwENDWHILE	272
#define	rwENDFOR	273
#define	rwDEFAULT	274
#define	rwFOR	275
#define	rwFOREACH	276
#define	rwFOREACHSTR	277
#define	rwIN	278
#define	rwDATABLOCK	279
#define	rwSWITCH	280
#define	rwCASE	281
#define	rwSWITCHSTR	282
#define	rwCASEOR	283
#define	rwPACKAGE	284
#define	rwNAMESPACE	285
#define	rwCLASS	286
#define	rwASSERT	287
#define	rwTYPENONE	288
#define	rwTYPEFLOAT	289
#define	rwTYPEINT	290
#define	rwTYPEBOOL	291
#define	rwTYPESTRING	292
#define	ILLEGAL_TOKEN	293
#define	CHRCONST	294
#define	INTCONST	295
#define	TTAG	296
#define	VAR	297
#define	IDENT	298
#define	TYPEIDENT	299
#define	DOCBLOCK	300
#define	STRATOM	301
#define	TAGATOM	302
#define	FLTCONST	303
#define	opINTNAME	304
#define	opINTNAMER	305
#define	opMINUSMINUS	306
#define	opPLUSPLUS	307
#define	STMT_SEP	308
#define	opSHL	309
#define	opSHR	310
#define	opPLASN	311
#define	opMIASN	312
#define	opMLASN	313
#define	opDVASN	314
#define	opMODASN	315
#define	opANDASN	316
#define	opXORASN	317
#define	opORASN	318
#define	opSLASN	319
#define	opSRASN	320
#define	opCAT	321
#define	opEQ	322
#define	opNE	323
#define	opGE	324
#define	opLE	325
#define	opAND	326
#define	opOR	327
#define	opSTREQ	328
#define	opCOLONCOLON	329
#define	opMDASN	330
#define	opNDASN	331
#define	opNTASN	332
#define	opSTRNE	333
#define	UNARY	334

#line 1 "cmdgram.y"


// bison --defines=cmdgram.h --verbose -o cmdgram.cpp -p CMD CMDgram.y

// Make sure we don't get gram.h twice.
#define _CMDGRAM_H_

#include <stdlib.h>
#include <stdio.h>
#include "console/console.h"
#include "console/compiler.h"
#include "console/consoleInternal.h"
#include "core/strings/stringFunctions.h"

#ifndef YYDEBUG
#define YYDEBUG 0
#endif

#define YYSSIZE 350

int outtext(char *fmt, ...);
extern int serrors;

#define nil 0
#undef YY_ARGS
#define YY_ARGS(x)   x

int CMDlex();
void CMDerror(char *, ...);

#ifdef alloca
#undef alloca
#endif
#define alloca dMalloc

template< typename T >
struct Token
{
   T value;
   U32 lineNumber;
};

#line 44 "cmdgram.y"

        /* Reserved Word Definitions */
#line 56 "cmdgram.y"

        /* Constants and Identifier Definitions */
#line 70 "cmdgram.y"

        /* Operator Definitions */

#line 83 "cmdgram.y"
typedef union {
   Token< char >           c;
   Token< int >            i;
   Token< const char* >    s;
   Token< char* >          str;
   Token< double >         f;
   StmtNode*               stmt;
   ExprNode*               expr;
   SlotAssignNode*         slist;
   VarNode*                var;
   SlotDecl                slot;
   InternalSlotDecl        intslot;
   ObjectBlockDecl         odcl;
   ObjectDeclNode*         od;
   AssignDecl              asn;
   IfStmtNode*             ifnode;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		397
#define	YYFLAG		-32768
#define	YYNTBASE	105

#define YYTRANSLATE(x) ((unsigned)(x) <= 334 ? yytranslate[x] : 147)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    69,     2,     2,     2,    59,    58,     2,    60,
    61,    51,    49,    62,    50,    56,    52,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    63,    64,    53,
    55,    54,   101,    70,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    97,     2,   104,    67,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    65,    57,    66,    68,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    98,
    99,   100,   102,   103
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     6,     8,    10,    12,    19,    21,    24,
    25,    28,    30,    32,    34,    36,    38,    40,    43,    46,
    49,    53,    56,    61,    68,    70,    79,    90,    91,    93,
    96,   101,   102,   104,   106,   108,   110,   112,   123,   134,
   142,   155,   165,   176,   184,   185,   188,   189,   191,   192,
   195,   196,   198,   200,   203,   206,   210,   214,   216,   224,
   232,   237,   245,   251,   253,   257,   263,   271,   277,   284,
   294,   303,   312,   320,   329,   337,   345,   352,   360,   368,
   370,   372,   376,   380,   384,   388,   392,   396,   400,   404,
   408,   411,   414,   416,   422,   426,   430,   434,   438,   442,
   446,   450,   454,   458,   462,   466,   470,   474,   477,   480,
   482,   484,   486,   488,   490,   492,   494,   496,   498,   503,
   511,   515,   522,   526,   530,   532,   536,   538,   540,   543,
   546,   549,   552,   555,   558,   561,   564,   567,   570,   572,
   574,   576,   579,   583,   590,   593,   599,   602,   606,   612,
   617,   624,   631,   636,   643,   644,   646,   648,   652,   653,
   655,   657,   660,   665,   671,   676,   684,   693,   695
};

static const short yyrhs[] = {   106,
     0,     0,   106,   107,     0,   111,     0,   112,     0,   108,
     0,    29,    43,    65,   109,    66,    64,     0,   112,     0,
   109,   112,     0,     0,   110,   111,     0,   128,     0,   129,
     0,   130,     0,   131,     0,   117,     0,   125,     0,     7,
    64,     0,     9,    64,     0,    13,    64,     0,    13,   133,
    64,     0,   132,    64,     0,    41,    55,   133,    64,     0,
    41,    55,   133,    62,   133,    64,     0,    45,     0,     3,
    43,    60,   113,    61,    65,   110,    66,     0,     3,    43,
    96,    43,    60,   113,    61,    65,   110,    66,     0,     0,
   114,     0,   115,    42,     0,   114,    62,   115,    42,     0,
     0,   116,     0,    36,     0,    34,     0,    35,     0,    37,
     0,    24,   136,    60,   133,   119,    61,    65,   143,    66,
    64,     0,     5,   136,    60,   120,   119,   121,    61,    65,
   122,    66,     0,     5,   136,    60,   120,   119,   121,    61,
     0,     5,   136,    60,    97,   120,   104,   119,   121,    61,
    65,   122,    66,     0,     5,   136,    60,    97,   120,   104,
   119,   121,    61,     0,     6,   136,    60,   120,   119,   121,
    61,    65,   122,    66,     0,     6,   136,    60,   120,   119,
   121,    61,     0,     0,    63,    43,     0,     0,   133,     0,
     0,    62,   142,     0,     0,   144,     0,   123,     0,   144,
   123,     0,   118,    64,     0,   123,   118,    64,     0,    65,
   110,    66,     0,   111,     0,    25,    60,   133,    61,    65,
   126,    66,     0,    27,    60,   133,    61,    65,   126,    66,
     0,    26,   127,    63,   110,     0,    26,   127,    63,   110,
    19,    63,   110,     0,    26,   127,    63,   110,   126,     0,
   133,     0,   127,    28,   133,     0,    11,    60,   133,    61,
   124,     0,    11,    60,   133,    61,   124,     8,   124,     0,
    14,    60,   133,    61,   124,     0,    15,   124,    14,    60,
   133,    61,     0,    20,    60,   133,    64,   133,    64,   133,
    61,   124,     0,    20,    60,   133,    64,   133,    64,    61,
   124,     0,    20,    60,   133,    64,    64,   133,    61,   124,
     0,    20,    60,   133,    64,    64,    61,   124,     0,    20,
    60,    64,   133,    64,   133,    61,   124,     0,    20,    60,
    64,   133,    64,    61,   124,     0,    20,    60,    64,    64,
   133,    61,   124,     0,    20,    60,    64,    64,    61,   124,
     0,    21,    60,    42,    23,   133,    61,   124,     0,    22,
    60,    42,    23,   133,    61,   124,     0,   138,     0,   138,
     0,    60,   133,    61,     0,   133,    67,   133,     0,   133,
    59,   133,     0,   133,    58,   133,     0,   133,    57,   133,
     0,   133,    49,   133,     0,   133,    50,   133,     0,   133,
    51,   133,     0,   133,    52,   133,     0,    50,   133,     0,
    51,   133,     0,    41,     0,   133,   101,   133,    63,   133,
     0,   133,    53,   133,     0,   133,    54,   133,     0,   133,
    91,   133,     0,   133,    92,   133,     0,   133,    89,   133,
     0,   133,    90,   133,     0,   133,    94,   133,     0,   133,
    76,   133,     0,   133,    77,   133,     0,   133,    93,   133,
     0,   133,    95,   133,     0,   133,   102,   133,     0,   133,
    70,   133,     0,    69,   133,     0,    68,   133,     0,    47,
     0,    48,     0,    40,     0,     7,     0,   134,     0,   135,
     0,    43,     0,    46,     0,    42,     0,    42,    97,   146,
   104,     0,     3,    60,   113,    61,    65,   110,    66,     0,
   133,    56,    43,     0,   133,    56,    43,    97,   146,   104,
     0,   133,    71,   136,     0,   133,    72,   136,     0,    43,
     0,    60,   133,    61,     0,    74,     0,    73,     0,    78,
   133,     0,    79,   133,     0,    80,   133,     0,    81,   133,
     0,    82,   133,     0,    83,   133,     0,    84,   133,     0,
    85,   133,     0,    86,   133,     0,    87,   133,     0,   139,
     0,   140,     0,   118,     0,   116,    42,     0,    42,    55,
   133,     0,    42,    97,   146,   104,    55,   133,     0,    42,
   137,     0,    42,    97,   146,   104,   137,     0,   134,   137,
     0,   134,    55,   133,     0,   134,    55,    65,   142,    66,
     0,    43,    60,   141,    61,     0,    43,    96,    43,    60,
   141,    61,     0,   133,    56,    43,    60,   141,    61,     0,
    32,    60,   133,    61,     0,    32,    60,   133,    62,    46,
    61,     0,     0,   142,     0,   133,     0,   142,    62,   133,
     0,     0,   144,     0,   145,     0,   144,   145,     0,    43,
    55,   133,    64,     0,    44,    43,    55,   133,    64,     0,
    24,    55,   133,    64,     0,    43,    97,   146,   104,    55,
   133,    64,     0,    44,    43,    97,   146,   104,    55,   133,
    64,     0,   133,     0,   146,    62,   133,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   164,   169,   171,   176,   178,   180,   185,   190,   192,   197,
   199,   204,   205,   206,   207,   208,   209,   210,   212,   214,
   216,   218,   220,   222,   224,   229,   231,   236,   238,   243,
   245,   250,   256,   260,   262,   264,   266,   271,   276,   278,
   280,   282,   284,   286,   291,   293,   298,   300,   305,   307,
   312,   314,   316,   318,   323,   325,   330,   332,   337,   339,
   344,   346,   348,   353,   355,   360,   362,   367,   369,   374,
   376,   378,   380,   382,   384,   386,   388,   393,   395,   400,
   405,   407,   409,   411,   413,   415,   417,   419,   421,   423,
   425,   427,   429,   431,   433,   435,   437,   439,   441,   443,
   445,   447,   449,   451,   453,   455,   457,   459,   461,   463,
   465,   467,   469,   471,   473,   475,   477,   479,   481,   483,
   501,   503,   508,   510,   515,   517,   522,   524,   526,   528,
   530,   532,   534,   536,   538,   540,   542,   544,   549,   551,
   553,   555,   557,   559,   561,   563,   565,   567,   569,   574,
   576,   578,   583,   585,   590,   592,   597,   599,   604,   606,
   611,   613,   618,   620,   622,   624,   626,   631,   633
};

static const char * const yytname[] = {   "$","error","$undefined.","rwDEFINE",
"rwENDDEF","rwDECLARE","rwDECLARESINGLETON","rwBREAK","rwELSE","rwCONTINUE",
"rwGLOBAL","rwIF","rwNIL","rwRETURN","rwWHILE","rwDO","rwENDIF","rwENDWHILE",
"rwENDFOR","rwDEFAULT","rwFOR","rwFOREACH","rwFOREACHSTR","rwIN","rwDATABLOCK",
"rwSWITCH","rwCASE","rwSWITCHSTR","rwCASEOR","rwPACKAGE","rwNAMESPACE","rwCLASS",
"rwASSERT","rwTYPENONE","rwTYPEFLOAT","rwTYPEINT","rwTYPEBOOL","rwTYPESTRING",
"ILLEGAL_TOKEN","CHRCONST","INTCONST","TTAG","VAR","IDENT","TYPEIDENT","DOCBLOCK",
"STRATOM","TAGATOM","FLTCONST","'+'","'-'","'*'","'/'","'<'","'>'","'='","'.'",
"'|'","'&'","'%'","'('","')'","','","':'","';'","'{'","'}'","'^'","'~'","'!'",
"'@'","opINTNAME","opINTNAMER","opMINUSMINUS","opPLUSPLUS","STMT_SEP","opSHL",
"opSHR","opPLASN","opMIASN","opMLASN","opDVASN","opMODASN","opANDASN","opXORASN",
"opORASN","opSLASN","opSRASN","opCAT","opEQ","opNE","opGE","opLE","opAND","opOR",
"opSTREQ","opCOLONCOLON","'['","opMDASN","opNDASN","opNTASN","'?'","opSTRNE",
"UNARY","']'","start","decl_list","decl","package_decl","fn_decl_list","statement_list",
"stmt","fn_decl_stmt","var_list_decl","var_list","var_type_opt","var_type","datablock_decl",
"object_decl","parent_block","object_name","object_args","object_declare_block",
"object_decl_list","stmt_block","switch_stmt","case_block","case_expr","if_stmt",
"while_stmt","for_stmt","foreach_stmt","expression_stmt","expr","slot_acc","intslot_acc",
"class_name_expr","assign_op_struct","stmt_expr","funcall_expr","assert_expr",
"expr_list_decl","expr_list","slot_assign_list_opt","slot_assign_list","slot_assign",
"aidx_expr",""
};
#endif

static const short yyr1[] = {     0,
   105,   106,   106,   107,   107,   107,   108,   109,   109,   110,
   110,   111,   111,   111,   111,   111,   111,   111,   111,   111,
   111,   111,   111,   111,   111,   112,   112,   113,   113,   114,
   114,   115,   115,   116,   116,   116,   116,   117,   118,   118,
   118,   118,   118,   118,   119,   119,   120,   120,   121,   121,
   122,   122,   122,   122,   123,   123,   124,   124,   125,   125,
   126,   126,   126,   127,   127,   128,   128,   129,   129,   130,
   130,   130,   130,   130,   130,   130,   130,   131,   131,   132,
   133,   133,   133,   133,   133,   133,   133,   133,   133,   133,
   133,   133,   133,   133,   133,   133,   133,   133,   133,   133,
   133,   133,   133,   133,   133,   133,   133,   133,   133,   133,
   133,   133,   133,   133,   133,   133,   133,   133,   133,   133,
   134,   134,   135,   135,   136,   136,   137,   137,   137,   137,
   137,   137,   137,   137,   137,   137,   137,   137,   138,   138,
   138,   138,   138,   138,   138,   138,   138,   138,   138,   139,
   139,   139,   140,   140,   141,   141,   142,   142,   143,   143,
   144,   144,   145,   145,   145,   145,   145,   146,   146
};

static const short yyr2[] = {     0,
     1,     0,     2,     1,     1,     1,     6,     1,     2,     0,
     2,     1,     1,     1,     1,     1,     1,     2,     2,     2,
     3,     2,     4,     6,     1,     8,    10,     0,     1,     2,
     4,     0,     1,     1,     1,     1,     1,    10,    10,     7,
    12,     9,    10,     7,     0,     2,     0,     1,     0,     2,
     0,     1,     1,     2,     2,     3,     3,     1,     7,     7,
     4,     7,     5,     1,     3,     5,     7,     5,     6,     9,
     8,     8,     7,     8,     7,     7,     6,     7,     7,     1,
     1,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     2,     2,     1,     5,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     2,     2,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     4,     7,
     3,     6,     3,     3,     1,     3,     1,     1,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     1,     1,
     1,     2,     3,     6,     2,     5,     2,     3,     5,     4,
     6,     6,     4,     6,     0,     1,     1,     3,     0,     1,
     1,     2,     4,     5,     4,     7,     8,     1,     3
};

static const short yydefact[] = {     2,
     1,     0,     0,     0,   113,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    35,    36,
    34,    37,   112,    93,   118,   116,    25,   117,   110,   111,
     0,     0,     0,     0,     0,     3,     6,     4,     5,     0,
    16,   141,    17,    12,    13,    14,    15,     0,     0,   114,
   115,    81,   139,   140,     0,    28,   125,     0,     0,     0,
    18,    19,     0,     0,   113,    93,    20,     0,    81,     0,
    10,    58,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   128,   127,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   145,   155,     0,    91,
    92,     0,   109,   108,   142,    22,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   147,    28,     0,     0,    29,     0,    33,     0,
    47,    47,     0,    21,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   143,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   168,     0,
   157,     0,   156,     0,    82,    87,    88,    89,    90,    95,
    96,   121,    86,    85,    84,    83,   107,   123,   124,   102,
   103,    99,   100,    97,    98,   104,   101,   105,     0,   106,
     0,   148,     0,     0,     0,    32,    30,   126,    47,    45,
    48,    45,     0,     0,    57,    11,     0,     0,     0,     0,
     0,     0,    45,     0,     0,     0,     0,     8,   153,     0,
     0,    23,     0,   119,   150,     0,   155,   155,     0,     0,
     0,     0,    28,    10,     0,     0,     0,    49,    49,    66,
    68,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     9,     0,     0,   169,     0,   146,   158,
     0,     0,     0,    94,   149,    10,     0,     0,    31,    45,
    46,     0,     0,     0,     0,    69,    77,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     7,
   154,    24,   144,   151,   152,   122,     0,     0,   120,    49,
    50,    40,    44,    67,    76,    75,     0,    73,     0,     0,
     0,    78,    79,   159,     0,    64,    59,    60,    26,    10,
     0,    51,    51,    74,    72,    71,     0,     0,     0,     0,
     0,   160,   161,     0,    10,     0,    42,     0,     0,    53,
    52,     0,    70,     0,     0,     0,     0,     0,   162,    65,
    61,    27,    51,    55,    39,     0,    54,    43,     0,     0,
     0,     0,     0,    38,     0,    63,     0,    56,   165,   163,
     0,     0,     0,    10,    41,     0,   164,     0,    62,     0,
     0,   166,     0,   167,     0,     0,     0
};

static const short yydefgoto[] = {   395,
     1,    36,    37,   227,   146,    72,    39,   136,   137,   138,
    40,    41,    42,   248,   210,   283,   349,   350,    73,    43,
   298,   325,    44,    45,    46,    47,    48,    49,    50,    51,
    59,    97,    69,    53,    54,   172,   173,   341,   351,   343,
   170
};

static const short yypact[] = {-32768,
   433,    -5,    56,    56,   -48,   -19,   -23,   578,   -12,   527,
   -10,     6,    35,    56,    43,    60,    -9,    65,-32768,-32768,
-32768,-32768,-32768,    76,  2970,   -27,-32768,-32768,-32768,-32768,
  1254,  1254,  1254,  1254,  1254,-32768,-32768,-32768,-32768,    90,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,    73,  2717,  2990,
-32768,    86,-32768,-32768,   -17,     5,-32768,  1254,    78,    95,
-32768,-32768,  1254,    97,-32768,-32768,-32768,  1367,-32768,  1254,
-32768,-32768,   137,   862,   114,   116,   100,  1254,  1254,    99,
  1254,  1254,  1254,-32768,-32768,  1254,  1254,  1254,  1254,  1254,
  1254,  1254,  1254,  1254,  1254,  1254,-32768,  1254,   123,    37,
    37,  1421,    37,    37,-32768,-32768,  1254,  1254,  1254,  1254,
  1254,  1254,   125,  1254,  1254,  1254,  1254,  1254,    56,    56,
  1254,  1254,  1254,  1254,  1254,  1254,  1254,  1254,  1254,  1254,
  1254,   911,-32768,     5,   130,   113,   122,   143,-32768,  1475,
    17,  1254,  1529,-32768,  1583,   223,   126,   960,  1637,   171,
   172,  1254,  1691,  1745,   197,  1259,  1313,  2717,  2717,  2717,
  2717,  2717,  2717,  2717,  2717,  2717,  2717,  2717,  2717,   -43,
  2717,   144,   146,   149,-32768,   400,   400,    37,    37,    77,
    77,   -35,  2858,  2916,    37,  2887,   278,-32768,-32768,   190,
   190,  2945,  2945,    77,    77,  2829,  2800,   278,  1799,   278,
  1254,  2717,   150,   154,   145,   106,-32768,-32768,  1254,   152,
  2717,   152,   527,   527,-32768,-32768,  1254,  1009,  1853,  1058,
  1254,  1254,  1907,   153,   155,   174,    10,-32768,-32768,   173,
  1254,-32768,  1254,  3005,-32768,  1254,  1254,  1254,  1254,  1254,
    38,   157,     5,-32768,   179,   119,   184,   169,   169,   225,
-32768,  1961,   527,  2015,  1107,  1156,  2069,  2123,  2177,   192,
   209,   209,   187,-32768,   193,  2231,  2717,  1254,-32768,  2717,
   195,   206,   -34,  2771,-32768,-32768,   211,   663,-32768,   152,
-32768,  1254,   214,   215,   527,-32768,-32768,   527,   527,  2285,
   527,  2339,  1205,   527,   527,   217,  1254,   213,   219,-32768,
-32768,-32768,  2717,-32768,-32768,-32768,   713,   221,-32768,   169,
   146,   230,   231,-32768,-32768,-32768,   527,-32768,   527,   527,
  2393,-32768,-32768,    74,    -7,  2717,-32768,-32768,-32768,-32768,
   239,    91,    91,-32768,-32768,-32768,   527,   246,   -26,   259,
   237,    74,-32768,  1254,-32768,   763,   240,   244,   238,    96,
    91,   243,-32768,  1254,  1254,  1254,   -25,   248,-32768,  2717,
   156,-32768,    91,-32768,-32768,   249,    96,-32768,  2447,  2501,
   -31,  1254,  1254,-32768,   247,-32768,   251,-32768,-32768,-32768,
   270,  2555,   -30,-32768,-32768,  1254,-32768,   271,   813,  2609,
  1254,-32768,  2663,-32768,   314,   331,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,  -240,     0,  -138,  -124,-32768,   127,
   -54,-32768,   -52,  -197,  -115,  -235,  -242,   -16,  -207,-32768,
  -250,-32768,-32768,-32768,-32768,-32768,-32768,   289,-32768,-32768,
     4,   -47,    -1,-32768,-32768,  -131,  -190,-32768,     8,  -307,
  -234
};


#define	YYLAST		3092


static const short yytable[] = {    52,
    38,   139,   133,   278,   273,   250,   251,    60,    52,   203,
   241,   299,   226,   284,   249,    61,   228,    77,   233,    64,
   344,     3,     4,    65,   238,   260,   212,   233,   355,   372,
   233,   233,    98,    80,   359,   307,    63,    55,    19,    20,
    21,    22,   134,   359,    62,   287,   -32,    70,    18,    74,
    19,    20,    21,    22,    56,   345,    23,    66,    25,    26,
   234,   239,    28,    29,    30,    75,    31,    32,    99,   306,
   356,   373,   381,   388,   331,   263,    33,   314,   135,   139,
   315,   316,   310,   318,    34,    35,   322,   323,   264,   346,
   352,   311,   113,   246,    76,     3,     4,   338,    57,   236,
     3,     4,    78,   275,   361,   271,   272,   119,   120,   334,
   376,   335,   336,   209,   338,    58,   339,   340,   277,    79,
   377,   371,   188,   189,    81,   107,   108,   109,   110,   353,
    82,   105,   113,   339,   340,   116,   106,   141,   383,    19,
    20,    21,    22,   389,    52,   216,   118,   119,   120,   -80,
   147,   139,   121,   122,   142,   150,    56,   151,    64,   152,
     3,     4,     5,   155,     6,   174,     7,   182,     8,     9,
    10,   129,   204,   205,   375,    11,    12,    13,   131,    14,
    15,   297,    16,   206,   207,   217,   269,    18,   139,    19,
    20,    21,    22,   221,   222,    23,    24,    25,    26,   226,
    27,    28,    29,    30,   235,    31,    32,   236,   237,   244,
   242,    52,    52,   243,   247,    33,    55,   261,   265,   262,
   279,   276,   280,    34,    35,    64,   281,     3,     4,     5,
   282,     6,   285,     7,   297,     8,     9,    10,   107,   108,
   109,   110,    11,    12,    13,   113,    14,    15,   116,    16,
   300,    52,   296,   301,    18,   304,    19,    20,    21,    22,
   119,   120,    23,    24,    25,    26,   305,    27,    28,    29,
    30,   308,    31,    32,   312,   313,    52,   216,   327,   348,
   348,   324,    33,    52,   328,   330,    52,    52,   215,    52,
    34,    35,    52,    52,   332,   333,    68,   366,   348,   347,
   354,   357,   358,   365,   363,    52,   216,   364,   368,   384,
   348,   374,   378,   396,   366,    52,   385,    52,    52,   100,
   101,   102,   103,   104,   386,   391,   107,   108,   109,   110,
   397,   342,   245,   113,   367,    52,   116,     0,     0,     0,
     0,     0,     0,     0,    52,   216,   140,     0,   119,   120,
     0,   143,     0,   121,   122,     0,     0,     0,   145,    52,
   216,     0,   149,     0,     0,     0,   153,   154,     0,   156,
   157,   158,     0,     0,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   168,   169,     0,   171,    52,   216,     0,
     0,     0,     0,     0,     0,   176,   177,   178,   179,   180,
   181,     0,   183,   184,   185,   186,   187,     0,     0,   190,
   191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
   202,     0,     0,     0,     0,     0,     0,     0,     0,   211,
   211,     0,     0,     0,     0,     2,   219,     3,     4,     5,
   223,     6,     0,     7,     0,     8,     9,    10,     0,     0,
   109,   110,    11,    12,    13,   113,    14,    15,   116,    16,
     0,    17,     0,     0,    18,     0,    19,    20,    21,    22,
   119,   120,    23,    24,    25,    26,     0,    27,    28,    29,
    30,     0,    31,    32,     0,     0,     0,     0,     0,   171,
     0,     0,    33,     0,     0,     0,     0,   211,     0,     0,
    34,    35,     0,     0,     0,   252,   254,     0,   257,   258,
   259,     0,     0,     0,     0,     0,     0,     0,     0,   266,
     0,   267,     0,     0,   270,   171,   171,   169,   274,    64,
     0,     3,     4,     5,     0,     6,     0,     7,     0,     8,
     9,    10,     0,   290,   292,     0,    11,    12,    13,     0,
    14,    15,     0,    16,     0,     0,   303,     0,    18,     0,
    19,    20,    21,    22,     0,     0,    23,    24,    25,    26,
   171,    27,    28,    29,    30,     0,    31,    32,     0,     0,
    64,   321,     3,     4,    65,   326,    33,     0,     0,     0,
     0,    71,     0,     0,    34,    35,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    18,
     0,    19,    20,    21,    22,     0,     0,    23,    66,    25,
    26,     0,     0,    28,    29,    30,     0,    31,    32,     0,
     0,     0,   360,     0,     0,     0,     0,    33,     0,     0,
     0,    67,   369,   370,   169,    34,    35,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   382,   169,     0,     0,     0,    64,     0,     3,     4,     5,
     0,     6,     0,     7,   390,     8,     9,    10,     0,   393,
     0,     0,    11,    12,    13,     0,    14,    15,     0,    16,
     0,     0,     0,     0,    18,     0,    19,    20,    21,    22,
     0,     0,    23,    24,    25,    26,     0,    27,    28,    29,
    30,     0,    31,    32,     0,    64,     0,     3,     4,     5,
     0,     6,    33,     7,     0,     8,     9,    10,   309,     0,
    34,    35,    11,    12,    13,     0,    14,    15,     0,    16,
     0,     0,     0,     0,    18,     0,    19,    20,    21,    22,
     0,     0,    23,    24,    25,    26,     0,    27,    28,    29,
    30,     0,    31,    32,     0,    64,     0,     3,     4,     5,
     0,     6,    33,     7,     0,     8,     9,    10,   329,     0,
    34,    35,    11,    12,    13,     0,    14,    15,     0,    16,
     0,     0,     0,     0,    18,     0,    19,    20,    21,    22,
     0,     0,    23,    24,    25,    26,     0,    27,    28,    29,
    30,     0,    31,    32,     0,    64,     0,     3,     4,     5,
     0,     6,    33,     7,     0,     8,     9,    10,   362,     0,
    34,    35,    11,    12,    13,     0,    14,    15,     0,    16,
     0,     0,     0,     0,    18,     0,    19,    20,    21,    22,
     0,     0,    23,    24,    25,    26,     0,    27,    28,    29,
    30,     0,    31,    32,    64,     0,     3,     4,    65,     0,
     0,     0,    33,     0,     0,     0,     0,     0,     0,     0,
    34,    35,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    18,     0,    19,    20,    21,    22,     0,
     0,    23,    66,    25,    26,     0,     0,    28,    29,    30,
     0,    31,    32,    64,     0,     3,     4,    65,     0,     0,
     0,    33,     0,     0,     0,   148,     0,     0,     0,    34,
    35,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    18,     0,    19,    20,    21,    22,     0,     0,
    23,    66,    25,    26,     0,     0,    28,    29,    30,     0,
    31,    32,    64,     0,     3,     4,    65,     0,     0,     0,
    33,     0,     0,     0,     0,   201,     0,     0,    34,    35,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    18,     0,    19,    20,    21,    22,     0,     0,    23,
    66,    25,    26,     0,     0,    28,    29,    30,     0,    31,
    32,    64,     0,     3,     4,    65,     0,     0,     0,    33,
     0,     0,     0,   218,     0,     0,     0,    34,    35,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    18,     0,    19,    20,    21,    22,     0,     0,    23,    66,
    25,    26,     0,     0,    28,    29,    30,     0,    31,    32,
    64,     0,     3,     4,    65,     0,     0,     0,    33,   253,
     0,     0,     0,     0,     0,     0,    34,    35,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    18,
     0,    19,    20,    21,    22,     0,     0,    23,    66,    25,
    26,     0,     0,    28,    29,    30,     0,    31,    32,    64,
     0,     3,     4,    65,     0,     0,     0,    33,     0,     0,
     0,   256,     0,     0,     0,    34,    35,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    18,     0,
    19,    20,    21,    22,     0,     0,    23,    66,    25,    26,
     0,     0,    28,    29,    30,     0,    31,    32,    64,     0,
     3,     4,    65,     0,     0,     0,    33,   289,     0,     0,
     0,     0,     0,     0,    34,    35,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    18,     0,    19,
    20,    21,    22,     0,     0,    23,    66,    25,    26,     0,
     0,    28,    29,    30,     0,    31,    32,    64,     0,     3,
     4,    65,     0,     0,     0,    33,   291,     0,     0,     0,
     0,     0,     0,    34,    35,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    18,     0,    19,    20,
    21,    22,     0,     0,    23,    66,    25,    26,     0,     0,
    28,    29,    30,     0,    31,    32,    64,     0,     3,     4,
    65,     0,     0,     0,    33,   320,     0,     0,     0,     0,
     0,     0,    34,    35,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    18,     0,    19,    20,    21,
    22,     0,     0,    23,    66,    25,    26,     0,     0,    28,
    29,    30,     0,    31,    32,     0,     0,   107,   108,   109,
   110,   111,   112,    33,   113,   114,   115,   116,     0,   229,
   230,    34,    35,     0,     0,   117,     0,     0,   118,   119,
   120,     0,     0,     0,   121,   122,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   123,   124,   125,
   126,   127,   128,   129,     0,     0,     0,     0,     0,   130,
   131,   107,   108,   109,   110,   111,   112,     0,   113,   114,
   115,   116,     0,     0,   231,     0,   232,     0,     0,   117,
     0,     0,   118,   119,   120,     0,     0,     0,   121,   122,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   123,   124,   125,   126,   127,   128,   129,     0,     0,
     0,     0,     0,   130,   131,   107,   108,   109,   110,   111,
   112,     0,   113,   114,   115,   116,     0,     0,     0,     0,
   144,     0,     0,   117,     0,     0,   118,   119,   120,     0,
     0,     0,   121,   122,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   123,   124,   125,   126,   127,
   128,   129,     0,     0,     0,     0,     0,   130,   131,   107,
   108,   109,   110,   111,   112,     0,   113,   114,   115,   116,
     0,   175,     0,     0,     0,     0,     0,   117,     0,     0,
   118,   119,   120,     0,     0,     0,   121,   122,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   123,
   124,   125,   126,   127,   128,   129,     0,     0,     0,     0,
     0,   130,   131,   107,   108,   109,   110,   111,   112,     0,
   113,   114,   115,   116,     0,   208,     0,     0,     0,     0,
     0,   117,     0,     0,   118,   119,   120,     0,     0,     0,
   121,   122,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   123,   124,   125,   126,   127,   128,   129,
     0,     0,     0,     0,     0,   130,   131,   107,   108,   109,
   110,   111,   112,     0,   113,   114,   115,   116,     0,   213,
     0,     0,     0,     0,     0,   117,     0,     0,   118,   119,
   120,     0,     0,     0,   121,   122,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   123,   124,   125,
   126,   127,   128,   129,     0,     0,     0,     0,     0,   130,
   131,   107,   108,   109,   110,   111,   112,     0,   113,   114,
   115,   116,     0,   214,     0,     0,     0,     0,     0,   117,
     0,     0,   118,   119,   120,     0,     0,     0,   121,   122,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   123,   124,   125,   126,   127,   128,   129,     0,     0,
     0,     0,     0,   130,   131,   107,   108,   109,   110,   111,
   112,     0,   113,   114,   115,   116,     0,     0,     0,     0,
   220,     0,     0,   117,     0,     0,   118,   119,   120,     0,
     0,     0,   121,   122,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   123,   124,   125,   126,   127,
   128,   129,     0,     0,     0,     0,     0,   130,   131,   107,
   108,   109,   110,   111,   112,     0,   113,   114,   115,   116,
     0,   224,     0,     0,     0,     0,     0,   117,     0,     0,
   118,   119,   120,     0,     0,     0,   121,   122,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   123,
   124,   125,   126,   127,   128,   129,     0,     0,     0,     0,
     0,   130,   131,   107,   108,   109,   110,   111,   112,     0,
   113,   114,   115,   116,     0,   225,     0,     0,     0,     0,
     0,   117,     0,     0,   118,   119,   120,     0,     0,     0,
   121,   122,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   123,   124,   125,   126,   127,   128,   129,
     0,     0,     0,     0,     0,   130,   131,   107,   108,   109,
   110,   111,   112,     0,   113,   114,   115,   116,     0,     0,
     0,   240,     0,     0,     0,   117,     0,     0,   118,   119,
   120,     0,     0,     0,   121,   122,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   123,   124,   125,
   126,   127,   128,   129,     0,     0,     0,     0,     0,   130,
   131,   107,   108,   109,   110,   111,   112,     0,   113,   114,
   115,   116,     0,     0,     0,     0,   255,     0,     0,   117,
     0,     0,   118,   119,   120,     0,     0,     0,   121,   122,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   123,   124,   125,   126,   127,   128,   129,     0,     0,
     0,     0,     0,   130,   131,   107,   108,   109,   110,   111,
   112,     0,   113,   114,   115,   116,     0,     0,     0,   247,
     0,     0,     0,   117,     0,     0,   118,   119,   120,     0,
     0,     0,   121,   122,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   123,   124,   125,   126,   127,
   128,   129,     0,     0,     0,     0,     0,   130,   131,   107,
   108,   109,   110,   111,   112,     0,   113,   114,   115,   116,
     0,   286,     0,     0,     0,     0,     0,   117,     0,     0,
   118,   119,   120,     0,     0,     0,   121,   122,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   123,
   124,   125,   126,   127,   128,   129,     0,     0,     0,     0,
     0,   130,   131,   107,   108,   109,   110,   111,   112,     0,
   113,   114,   115,   116,     0,   288,     0,     0,     0,     0,
     0,   117,     0,     0,   118,   119,   120,     0,     0,     0,
   121,   122,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   123,   124,   125,   126,   127,   128,   129,
     0,     0,     0,     0,     0,   130,   131,   107,   108,   109,
   110,   111,   112,     0,   113,   114,   115,   116,     0,     0,
     0,     0,   293,     0,     0,   117,     0,     0,   118,   119,
   120,     0,     0,     0,   121,   122,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   123,   124,   125,
   126,   127,   128,   129,     0,     0,     0,     0,     0,   130,
   131,   107,   108,   109,   110,   111,   112,     0,   113,   114,
   115,   116,     0,   294,     0,     0,     0,     0,     0,   117,
     0,     0,   118,   119,   120,     0,     0,     0,   121,   122,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   123,   124,   125,   126,   127,   128,   129,     0,     0,
     0,     0,     0,   130,   131,   107,   108,   109,   110,   111,
   112,     0,   113,   114,   115,   116,     0,   295,     0,     0,
     0,     0,     0,   117,     0,     0,   118,   119,   120,     0,
     0,     0,   121,   122,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   123,   124,   125,   126,   127,
   128,   129,     0,     0,     0,     0,     0,   130,   131,   107,
   108,   109,   110,   111,   112,     0,   113,   114,   115,   116,
     0,     0,     0,     0,   302,     0,     0,   117,     0,     0,
   118,   119,   120,     0,     0,     0,   121,   122,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   123,
   124,   125,   126,   127,   128,   129,     0,     0,     0,     0,
     0,   130,   131,   107,   108,   109,   110,   111,   112,     0,
   113,   114,   115,   116,     0,   317,     0,     0,     0,     0,
     0,   117,     0,     0,   118,   119,   120,     0,     0,     0,
   121,   122,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   123,   124,   125,   126,   127,   128,   129,
     0,     0,     0,     0,     0,   130,   131,   107,   108,   109,
   110,   111,   112,     0,   113,   114,   115,   116,     0,   319,
     0,     0,     0,     0,     0,   117,     0,     0,   118,   119,
   120,     0,     0,     0,   121,   122,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   123,   124,   125,
   126,   127,   128,   129,     0,     0,     0,     0,     0,   130,
   131,   107,   108,   109,   110,   111,   112,     0,   113,   114,
   115,   116,     0,   337,     0,     0,     0,     0,     0,   117,
     0,     0,   118,   119,   120,     0,     0,     0,   121,   122,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   123,   124,   125,   126,   127,   128,   129,     0,     0,
     0,     0,     0,   130,   131,   107,   108,   109,   110,   111,
   112,     0,   113,   114,   115,   116,     0,     0,     0,     0,
   379,     0,     0,   117,     0,     0,   118,   119,   120,     0,
     0,     0,   121,   122,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   123,   124,   125,   126,   127,
   128,   129,     0,     0,     0,     0,     0,   130,   131,   107,
   108,   109,   110,   111,   112,     0,   113,   114,   115,   116,
     0,     0,     0,     0,   380,     0,     0,   117,     0,     0,
   118,   119,   120,     0,     0,     0,   121,   122,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   123,
   124,   125,   126,   127,   128,   129,     0,     0,     0,     0,
     0,   130,   131,   107,   108,   109,   110,   111,   112,     0,
   113,   114,   115,   116,     0,     0,     0,     0,   387,     0,
     0,   117,     0,     0,   118,   119,   120,     0,     0,     0,
   121,   122,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   123,   124,   125,   126,   127,   128,   129,
     0,     0,     0,     0,     0,   130,   131,   107,   108,   109,
   110,   111,   112,     0,   113,   114,   115,   116,     0,     0,
     0,     0,   392,     0,     0,   117,     0,     0,   118,   119,
   120,     0,     0,     0,   121,   122,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   123,   124,   125,
   126,   127,   128,   129,     0,     0,     0,     0,     0,   130,
   131,   107,   108,   109,   110,   111,   112,     0,   113,   114,
   115,   116,     0,     0,     0,     0,   394,     0,     0,   117,
     0,     0,   118,   119,   120,     0,     0,     0,   121,   122,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   123,   124,   125,   126,   127,   128,   129,     0,     0,
     0,     0,     0,   130,   131,   107,   108,   109,   110,   111,
   112,     0,   113,   114,   115,   116,     0,     0,     0,     0,
     0,     0,     0,   117,     0,     0,   118,   119,   120,     0,
     0,     0,   121,   122,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   123,   124,   125,   126,   127,
   128,   129,     0,     0,     0,     0,     0,   130,   131,   107,
   108,   109,   110,   111,   112,     0,   113,   114,   115,   116,
     0,     0,     0,     0,     0,     0,     0,   117,     0,     0,
   118,   119,   120,     0,     0,     0,   121,   122,   107,   108,
   109,   110,   111,   112,     0,   113,   114,   115,   116,   123,
   124,   125,   126,   127,   128,   129,   117,     0,     0,   118,
   119,   120,   131,     0,     0,   121,   122,   107,   108,   109,
   110,   111,   112,     0,   113,   114,   115,   116,   123,   124,
   125,   126,   127,     0,   129,   117,     0,     0,   118,   119,
   120,   131,     0,     0,   121,   122,   107,   108,   109,   110,
   111,   112,     0,   113,     0,   115,   116,   123,   124,   125,
   126,     0,     0,   129,   117,     0,     0,   118,   119,   120,
   131,     0,     0,   121,   122,   107,   108,   109,   110,   111,
   112,     0,   113,     0,   115,   116,   123,   124,   125,   126,
     0,     0,   129,     0,     0,     0,   118,   119,   120,   131,
     0,     0,   121,   122,   107,   108,   109,   110,   111,   112,
     0,   113,     0,     0,   116,   123,   124,   125,   126,     0,
     0,   129,     0,     0,     0,   118,   119,   120,   131,     0,
     0,   121,   122,   107,   108,   109,   110,   111,   112,     0,
   113,     0,     0,   116,   123,   124,   125,   126,     0,     0,
   129,     0,     0,     0,   118,   119,   120,   131,     0,     0,
   121,   122,     0,     0,    83,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   125,   126,     0,     0,   129,
     0,     0,    84,    85,   132,     0,   131,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,     0,     0,   268,
     0,     0,    84,    85,     0,     0,    96,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    84,    85,     0,
     0,     0,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95
};

static const short yycheck[] = {     1,
     1,    56,    50,   244,   239,   213,   214,     4,    10,   134,
   201,   262,     3,   249,   212,    64,   155,    14,    62,     3,
    28,     5,     6,     7,    60,   223,   142,    62,    55,    55,
    62,    62,    60,    43,   342,   276,    60,    43,    34,    35,
    36,    37,    60,   351,    64,   253,    42,    60,    32,    60,
    34,    35,    36,    37,    60,    63,    40,    41,    42,    43,
   104,    97,    46,    47,    48,    60,    50,    51,    96,   104,
    97,    97,   104,   104,   310,    66,    60,   285,    96,   134,
   288,   289,   280,   291,    68,    69,   294,   295,   227,   330,
   333,   282,    56,   209,    60,     5,     6,    24,    43,    62,
     5,     6,    60,    66,   345,   237,   238,    71,    72,   317,
   361,   319,   320,    97,    24,    60,    43,    44,   243,    60,
   363,   356,   119,   120,    60,    49,    50,    51,    52,   337,
    55,    42,    56,    43,    44,    59,    64,    60,   373,    34,
    35,    36,    37,   384,   146,   146,    70,    71,    72,    64,
    14,   206,    76,    77,    60,    42,    60,    42,     3,    60,
     5,     6,     7,    65,     9,    43,    11,    43,    13,    14,
    15,    95,    43,    61,    19,    20,    21,    22,   102,    24,
    25,    26,    27,    62,    42,    60,   234,    32,   243,    34,
    35,    36,    37,    23,    23,    40,    41,    42,    43,     3,
    45,    46,    47,    48,    61,    50,    51,    62,    60,    65,
    61,   213,   214,    60,    63,    60,    43,    65,    46,    65,
    42,    65,   104,    68,    69,     3,    43,     5,     6,     7,
    62,     9,     8,    11,    26,    13,    14,    15,    49,    50,
    51,    52,    20,    21,    22,    56,    24,    25,    59,    27,
    64,   253,    61,    61,    32,    61,    34,    35,    36,    37,
    71,    72,    40,    41,    42,    43,    61,    45,    46,    47,
    48,    61,    50,    51,    61,    61,   278,   278,    66,   332,
   333,    65,    60,   285,    66,    65,   288,   289,    66,   291,
    68,    69,   294,   295,    65,    65,     8,   350,   351,    61,
    55,    43,    66,    66,    65,   307,   307,    64,    66,    63,
   363,    64,    64,     0,   367,   317,    66,   319,   320,    31,
    32,    33,    34,    35,    55,    55,    49,    50,    51,    52,
     0,   324,   206,    56,   351,   337,    59,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   346,   346,    58,    -1,    71,    72,
    -1,    63,    -1,    76,    77,    -1,    -1,    -1,    70,   361,
   361,    -1,    74,    -1,    -1,    -1,    78,    79,    -1,    81,
    82,    83,    -1,    -1,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    -1,    98,   389,   389,    -1,
    -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,
   112,    -1,   114,   115,   116,   117,   118,    -1,    -1,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   141,
   142,    -1,    -1,    -1,    -1,     3,   148,     5,     6,     7,
   152,     9,    -1,    11,    -1,    13,    14,    15,    -1,    -1,
    51,    52,    20,    21,    22,    56,    24,    25,    59,    27,
    -1,    29,    -1,    -1,    32,    -1,    34,    35,    36,    37,
    71,    72,    40,    41,    42,    43,    -1,    45,    46,    47,
    48,    -1,    50,    51,    -1,    -1,    -1,    -1,    -1,   201,
    -1,    -1,    60,    -1,    -1,    -1,    -1,   209,    -1,    -1,
    68,    69,    -1,    -1,    -1,   217,   218,    -1,   220,   221,
   222,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,
    -1,   233,    -1,    -1,   236,   237,   238,   239,   240,     3,
    -1,     5,     6,     7,    -1,     9,    -1,    11,    -1,    13,
    14,    15,    -1,   255,   256,    -1,    20,    21,    22,    -1,
    24,    25,    -1,    27,    -1,    -1,   268,    -1,    32,    -1,
    34,    35,    36,    37,    -1,    -1,    40,    41,    42,    43,
   282,    45,    46,    47,    48,    -1,    50,    51,    -1,    -1,
     3,   293,     5,     6,     7,   297,    60,    -1,    -1,    -1,
    -1,    65,    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,
    -1,    34,    35,    36,    37,    -1,    -1,    40,    41,    42,
    43,    -1,    -1,    46,    47,    48,    -1,    50,    51,    -1,
    -1,    -1,   344,    -1,    -1,    -1,    -1,    60,    -1,    -1,
    -1,    64,   354,   355,   356,    68,    69,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   372,   373,    -1,    -1,    -1,     3,    -1,     5,     6,     7,
    -1,     9,    -1,    11,   386,    13,    14,    15,    -1,   391,
    -1,    -1,    20,    21,    22,    -1,    24,    25,    -1,    27,
    -1,    -1,    -1,    -1,    32,    -1,    34,    35,    36,    37,
    -1,    -1,    40,    41,    42,    43,    -1,    45,    46,    47,
    48,    -1,    50,    51,    -1,     3,    -1,     5,     6,     7,
    -1,     9,    60,    11,    -1,    13,    14,    15,    66,    -1,
    68,    69,    20,    21,    22,    -1,    24,    25,    -1,    27,
    -1,    -1,    -1,    -1,    32,    -1,    34,    35,    36,    37,
    -1,    -1,    40,    41,    42,    43,    -1,    45,    46,    47,
    48,    -1,    50,    51,    -1,     3,    -1,     5,     6,     7,
    -1,     9,    60,    11,    -1,    13,    14,    15,    66,    -1,
    68,    69,    20,    21,    22,    -1,    24,    25,    -1,    27,
    -1,    -1,    -1,    -1,    32,    -1,    34,    35,    36,    37,
    -1,    -1,    40,    41,    42,    43,    -1,    45,    46,    47,
    48,    -1,    50,    51,    -1,     3,    -1,     5,     6,     7,
    -1,     9,    60,    11,    -1,    13,    14,    15,    66,    -1,
    68,    69,    20,    21,    22,    -1,    24,    25,    -1,    27,
    -1,    -1,    -1,    -1,    32,    -1,    34,    35,    36,    37,
    -1,    -1,    40,    41,    42,    43,    -1,    45,    46,    47,
    48,    -1,    50,    51,     3,    -1,     5,     6,     7,    -1,
    -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    32,    -1,    34,    35,    36,    37,    -1,
    -1,    40,    41,    42,    43,    -1,    -1,    46,    47,    48,
    -1,    50,    51,     3,    -1,     5,     6,     7,    -1,    -1,
    -1,    60,    -1,    -1,    -1,    64,    -1,    -1,    -1,    68,
    69,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    32,    -1,    34,    35,    36,    37,    -1,    -1,
    40,    41,    42,    43,    -1,    -1,    46,    47,    48,    -1,
    50,    51,     3,    -1,     5,     6,     7,    -1,    -1,    -1,
    60,    -1,    -1,    -1,    -1,    65,    -1,    -1,    68,    69,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    32,    -1,    34,    35,    36,    37,    -1,    -1,    40,
    41,    42,    43,    -1,    -1,    46,    47,    48,    -1,    50,
    51,     3,    -1,     5,     6,     7,    -1,    -1,    -1,    60,
    -1,    -1,    -1,    64,    -1,    -1,    -1,    68,    69,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    32,    -1,    34,    35,    36,    37,    -1,    -1,    40,    41,
    42,    43,    -1,    -1,    46,    47,    48,    -1,    50,    51,
     3,    -1,     5,     6,     7,    -1,    -1,    -1,    60,    61,
    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,
    -1,    34,    35,    36,    37,    -1,    -1,    40,    41,    42,
    43,    -1,    -1,    46,    47,    48,    -1,    50,    51,     3,
    -1,     5,     6,     7,    -1,    -1,    -1,    60,    -1,    -1,
    -1,    64,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,
    34,    35,    36,    37,    -1,    -1,    40,    41,    42,    43,
    -1,    -1,    46,    47,    48,    -1,    50,    51,     3,    -1,
     5,     6,     7,    -1,    -1,    -1,    60,    61,    -1,    -1,
    -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    34,
    35,    36,    37,    -1,    -1,    40,    41,    42,    43,    -1,
    -1,    46,    47,    48,    -1,    50,    51,     3,    -1,     5,
     6,     7,    -1,    -1,    -1,    60,    61,    -1,    -1,    -1,
    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    34,    35,
    36,    37,    -1,    -1,    40,    41,    42,    43,    -1,    -1,
    46,    47,    48,    -1,    50,    51,     3,    -1,     5,     6,
     7,    -1,    -1,    -1,    60,    61,    -1,    -1,    -1,    -1,
    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    32,    -1,    34,    35,    36,
    37,    -1,    -1,    40,    41,    42,    43,    -1,    -1,    46,
    47,    48,    -1,    50,    51,    -1,    -1,    49,    50,    51,
    52,    53,    54,    60,    56,    57,    58,    59,    -1,    61,
    62,    68,    69,    -1,    -1,    67,    -1,    -1,    70,    71,
    72,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,    90,    91,
    92,    93,    94,    95,    -1,    -1,    -1,    -1,    -1,   101,
   102,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
    58,    59,    -1,    -1,    62,    -1,    64,    -1,    -1,    67,
    -1,    -1,    70,    71,    72,    -1,    -1,    -1,    76,    77,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    89,    90,    91,    92,    93,    94,    95,    -1,    -1,
    -1,    -1,    -1,   101,   102,    49,    50,    51,    52,    53,
    54,    -1,    56,    57,    58,    59,    -1,    -1,    -1,    -1,
    64,    -1,    -1,    67,    -1,    -1,    70,    71,    72,    -1,
    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    89,    90,    91,    92,    93,
    94,    95,    -1,    -1,    -1,    -1,    -1,   101,   102,    49,
    50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,
    70,    71,    72,    -1,    -1,    -1,    76,    77,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,
    90,    91,    92,    93,    94,    95,    -1,    -1,    -1,    -1,
    -1,   101,   102,    49,    50,    51,    52,    53,    54,    -1,
    56,    57,    58,    59,    -1,    61,    -1,    -1,    -1,    -1,
    -1,    67,    -1,    -1,    70,    71,    72,    -1,    -1,    -1,
    76,    77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    89,    90,    91,    92,    93,    94,    95,
    -1,    -1,    -1,    -1,    -1,   101,   102,    49,    50,    51,
    52,    53,    54,    -1,    56,    57,    58,    59,    -1,    61,
    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    70,    71,
    72,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,    90,    91,
    92,    93,    94,    95,    -1,    -1,    -1,    -1,    -1,   101,
   102,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
    58,    59,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,
    -1,    -1,    70,    71,    72,    -1,    -1,    -1,    76,    77,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    89,    90,    91,    92,    93,    94,    95,    -1,    -1,
    -1,    -1,    -1,   101,   102,    49,    50,    51,    52,    53,
    54,    -1,    56,    57,    58,    59,    -1,    -1,    -1,    -1,
    64,    -1,    -1,    67,    -1,    -1,    70,    71,    72,    -1,
    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    89,    90,    91,    92,    93,
    94,    95,    -1,    -1,    -1,    -1,    -1,   101,   102,    49,
    50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,
    70,    71,    72,    -1,    -1,    -1,    76,    77,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,
    90,    91,    92,    93,    94,    95,    -1,    -1,    -1,    -1,
    -1,   101,   102,    49,    50,    51,    52,    53,    54,    -1,
    56,    57,    58,    59,    -1,    61,    -1,    -1,    -1,    -1,
    -1,    67,    -1,    -1,    70,    71,    72,    -1,    -1,    -1,
    76,    77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    89,    90,    91,    92,    93,    94,    95,
    -1,    -1,    -1,    -1,    -1,   101,   102,    49,    50,    51,
    52,    53,    54,    -1,    56,    57,    58,    59,    -1,    -1,
    -1,    63,    -1,    -1,    -1,    67,    -1,    -1,    70,    71,
    72,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,    90,    91,
    92,    93,    94,    95,    -1,    -1,    -1,    -1,    -1,   101,
   102,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
    58,    59,    -1,    -1,    -1,    -1,    64,    -1,    -1,    67,
    -1,    -1,    70,    71,    72,    -1,    -1,    -1,    76,    77,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    89,    90,    91,    92,    93,    94,    95,    -1,    -1,
    -1,    -1,    -1,   101,   102,    49,    50,    51,    52,    53,
    54,    -1,    56,    57,    58,    59,    -1,    -1,    -1,    63,
    -1,    -1,    -1,    67,    -1,    -1,    70,    71,    72,    -1,
    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    89,    90,    91,    92,    93,
    94,    95,    -1,    -1,    -1,    -1,    -1,   101,   102,    49,
    50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,
    70,    71,    72,    -1,    -1,    -1,    76,    77,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,
    90,    91,    92,    93,    94,    95,    -1,    -1,    -1,    -1,
    -1,   101,   102,    49,    50,    51,    52,    53,    54,    -1,
    56,    57,    58,    59,    -1,    61,    -1,    -1,    -1,    -1,
    -1,    67,    -1,    -1,    70,    71,    72,    -1,    -1,    -1,
    76,    77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    89,    90,    91,    92,    93,    94,    95,
    -1,    -1,    -1,    -1,    -1,   101,   102,    49,    50,    51,
    52,    53,    54,    -1,    56,    57,    58,    59,    -1,    -1,
    -1,    -1,    64,    -1,    -1,    67,    -1,    -1,    70,    71,
    72,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,    90,    91,
    92,    93,    94,    95,    -1,    -1,    -1,    -1,    -1,   101,
   102,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
    58,    59,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,
    -1,    -1,    70,    71,    72,    -1,    -1,    -1,    76,    77,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    89,    90,    91,    92,    93,    94,    95,    -1,    -1,
    -1,    -1,    -1,   101,   102,    49,    50,    51,    52,    53,
    54,    -1,    56,    57,    58,    59,    -1,    61,    -1,    -1,
    -1,    -1,    -1,    67,    -1,    -1,    70,    71,    72,    -1,
    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    89,    90,    91,    92,    93,
    94,    95,    -1,    -1,    -1,    -1,    -1,   101,   102,    49,
    50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
    -1,    -1,    -1,    -1,    64,    -1,    -1,    67,    -1,    -1,
    70,    71,    72,    -1,    -1,    -1,    76,    77,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,
    90,    91,    92,    93,    94,    95,    -1,    -1,    -1,    -1,
    -1,   101,   102,    49,    50,    51,    52,    53,    54,    -1,
    56,    57,    58,    59,    -1,    61,    -1,    -1,    -1,    -1,
    -1,    67,    -1,    -1,    70,    71,    72,    -1,    -1,    -1,
    76,    77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    89,    90,    91,    92,    93,    94,    95,
    -1,    -1,    -1,    -1,    -1,   101,   102,    49,    50,    51,
    52,    53,    54,    -1,    56,    57,    58,    59,    -1,    61,
    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    70,    71,
    72,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,    90,    91,
    92,    93,    94,    95,    -1,    -1,    -1,    -1,    -1,   101,
   102,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
    58,    59,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,
    -1,    -1,    70,    71,    72,    -1,    -1,    -1,    76,    77,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    89,    90,    91,    92,    93,    94,    95,    -1,    -1,
    -1,    -1,    -1,   101,   102,    49,    50,    51,    52,    53,
    54,    -1,    56,    57,    58,    59,    -1,    -1,    -1,    -1,
    64,    -1,    -1,    67,    -1,    -1,    70,    71,    72,    -1,
    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    89,    90,    91,    92,    93,
    94,    95,    -1,    -1,    -1,    -1,    -1,   101,   102,    49,
    50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
    -1,    -1,    -1,    -1,    64,    -1,    -1,    67,    -1,    -1,
    70,    71,    72,    -1,    -1,    -1,    76,    77,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,
    90,    91,    92,    93,    94,    95,    -1,    -1,    -1,    -1,
    -1,   101,   102,    49,    50,    51,    52,    53,    54,    -1,
    56,    57,    58,    59,    -1,    -1,    -1,    -1,    64,    -1,
    -1,    67,    -1,    -1,    70,    71,    72,    -1,    -1,    -1,
    76,    77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    89,    90,    91,    92,    93,    94,    95,
    -1,    -1,    -1,    -1,    -1,   101,   102,    49,    50,    51,
    52,    53,    54,    -1,    56,    57,    58,    59,    -1,    -1,
    -1,    -1,    64,    -1,    -1,    67,    -1,    -1,    70,    71,
    72,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,    90,    91,
    92,    93,    94,    95,    -1,    -1,    -1,    -1,    -1,   101,
   102,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
    58,    59,    -1,    -1,    -1,    -1,    64,    -1,    -1,    67,
    -1,    -1,    70,    71,    72,    -1,    -1,    -1,    76,    77,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    89,    90,    91,    92,    93,    94,    95,    -1,    -1,
    -1,    -1,    -1,   101,   102,    49,    50,    51,    52,    53,
    54,    -1,    56,    57,    58,    59,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    67,    -1,    -1,    70,    71,    72,    -1,
    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    89,    90,    91,    92,    93,
    94,    95,    -1,    -1,    -1,    -1,    -1,   101,   102,    49,
    50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,
    70,    71,    72,    -1,    -1,    -1,    76,    77,    49,    50,
    51,    52,    53,    54,    -1,    56,    57,    58,    59,    89,
    90,    91,    92,    93,    94,    95,    67,    -1,    -1,    70,
    71,    72,   102,    -1,    -1,    76,    77,    49,    50,    51,
    52,    53,    54,    -1,    56,    57,    58,    59,    89,    90,
    91,    92,    93,    -1,    95,    67,    -1,    -1,    70,    71,
    72,   102,    -1,    -1,    76,    77,    49,    50,    51,    52,
    53,    54,    -1,    56,    -1,    58,    59,    89,    90,    91,
    92,    -1,    -1,    95,    67,    -1,    -1,    70,    71,    72,
   102,    -1,    -1,    76,    77,    49,    50,    51,    52,    53,
    54,    -1,    56,    -1,    58,    59,    89,    90,    91,    92,
    -1,    -1,    95,    -1,    -1,    -1,    70,    71,    72,   102,
    -1,    -1,    76,    77,    49,    50,    51,    52,    53,    54,
    -1,    56,    -1,    -1,    59,    89,    90,    91,    92,    -1,
    -1,    95,    -1,    -1,    -1,    70,    71,    72,   102,    -1,
    -1,    76,    77,    49,    50,    51,    52,    53,    54,    -1,
    56,    -1,    -1,    59,    89,    90,    91,    92,    -1,    -1,
    95,    -1,    -1,    -1,    70,    71,    72,   102,    -1,    -1,
    76,    77,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    91,    92,    -1,    -1,    95,
    -1,    -1,    73,    74,    55,    -1,   102,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    -1,    -1,    55,
    -1,    -1,    73,    74,    -1,    -1,    97,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    73,    74,    -1,
    -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 165 "cmdgram.y"
{ ;
    break;}
case 2:
#line 170 "cmdgram.y"
{ yyval.stmt = nil; ;
    break;}
case 3:
#line 172 "cmdgram.y"
{ if(!gStatementList) { gStatementList = yyvsp[0].stmt; } else { gStatementList->append(yyvsp[0].stmt); } ;
    break;}
case 4:
#line 177 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 5:
#line 179 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 6:
#line 181 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 7:
#line 186 "cmdgram.y"
{ yyval.stmt = yyvsp[-2].stmt; for(StmtNode *walk = (yyvsp[-2].stmt);walk;walk = walk->getNext() ) walk->setPackage(yyvsp[-4].s.value); ;
    break;}
case 8:
#line 191 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 9:
#line 193 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].stmt; (yyvsp[-1].stmt)->append(yyvsp[0].stmt);  ;
    break;}
case 10:
#line 198 "cmdgram.y"
{ yyval.stmt = nil; ;
    break;}
case 11:
#line 200 "cmdgram.y"
{ if(!yyvsp[-1].stmt) { yyval.stmt = yyvsp[0].stmt; } else { (yyvsp[-1].stmt)->append(yyvsp[0].stmt); yyval.stmt = yyvsp[-1].stmt; } ;
    break;}
case 18:
#line 211 "cmdgram.y"
{ yyval.stmt = BreakStmtNode::alloc( yyvsp[-1].i.lineNumber ); ;
    break;}
case 19:
#line 213 "cmdgram.y"
{ yyval.stmt = ContinueStmtNode::alloc( yyvsp[-1].i.lineNumber ); ;
    break;}
case 20:
#line 215 "cmdgram.y"
{ yyval.stmt = ReturnStmtNode::alloc( yyvsp[-1].i.lineNumber, NULL ); ;
    break;}
case 21:
#line 217 "cmdgram.y"
{ yyval.stmt = ReturnStmtNode::alloc( yyvsp[-2].i.lineNumber, yyvsp[-1].expr ); ;
    break;}
case 22:
#line 219 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].stmt; ;
    break;}
case 23:
#line 221 "cmdgram.y"
{ yyval.stmt = TTagSetStmtNode::alloc( yyvsp[-3].s.lineNumber, yyvsp[-3].s.value, yyvsp[-1].expr, NULL ); ;
    break;}
case 24:
#line 223 "cmdgram.y"
{ yyval.stmt = TTagSetStmtNode::alloc( yyvsp[-5].s.lineNumber, yyvsp[-5].s.value, yyvsp[-3].expr, yyvsp[-1].expr ); ;
    break;}
case 25:
#line 225 "cmdgram.y"
{ yyval.stmt = StrConstNode::alloc( yyvsp[0].str.lineNumber, yyvsp[0].str.value, false, true ); ;
    break;}
case 26:
#line 230 "cmdgram.y"
{ yyval.stmt = FunctionDeclStmtNode::alloc( yyvsp[-7].i.lineNumber, yyvsp[-6].s.value, NULL, yyvsp[-4].var, yyvsp[-1].stmt ); ;
    break;}
case 27:
#line 232 "cmdgram.y"
{ yyval.stmt = FunctionDeclStmtNode::alloc( yyvsp[-9].i.lineNumber, yyvsp[-6].s.value, yyvsp[-8].s.value, yyvsp[-4].var, yyvsp[-1].stmt ); ;
    break;}
case 28:
#line 237 "cmdgram.y"
{ yyval.var = NULL; ;
    break;}
case 29:
#line 239 "cmdgram.y"
{ yyval.var = yyvsp[0].var; ;
    break;}
case 30:
#line 244 "cmdgram.y"
{ yyval.var = VarNode::alloc( yyvsp[0].s.lineNumber, yyvsp[0].s.value, NULL, ((yyvsp[-1].i.value == -1) ? -1 : yyvsp[-1].i.value) ); ;
    break;}
case 31:
#line 246 "cmdgram.y"
{ yyval.var = yyvsp[-3].var; ((StmtNode*)(yyvsp[-3].var))->append((StmtNode*)VarNode::alloc( yyvsp[-1].i.lineNumber, yyvsp[0].s.value, NULL, ((yyvsp[-1].i.value == -1) ? -1 : yyvsp[-1].i.value) ) ); ;
    break;}
case 32:
#line 251 "cmdgram.y"
{ 
	    Token<int> tmp;
		tmp.value = -1;
	    yyval.i = tmp; 
	 ;
    break;}
case 33:
#line 257 "cmdgram.y"
{ yyval.i = yyvsp[0].i; ;
    break;}
case 34:
#line 261 "cmdgram.y"
{ yyval.i = yyvsp[0].i; ;
    break;}
case 35:
#line 263 "cmdgram.y"
{ yyval.i = yyvsp[0].i; ;
    break;}
case 36:
#line 265 "cmdgram.y"
{ yyval.i = yyvsp[0].i; ;
    break;}
case 37:
#line 267 "cmdgram.y"
{ yyval.i = yyvsp[0].i; ;
    break;}
case 38:
#line 272 "cmdgram.y"
{ yyval.stmt = ObjectDeclNode::alloc( yyvsp[-9].i.lineNumber, yyvsp[-8].expr, yyvsp[-6].expr, NULL, yyvsp[-5].s.value, yyvsp[-2].slist, NULL, true, false, false); ;
    break;}
case 39:
#line 277 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-9].i.lineNumber, yyvsp[-8].expr, yyvsp[-6].expr, yyvsp[-4].expr, yyvsp[-5].s.value, yyvsp[-1].odcl.slots, yyvsp[-1].odcl.decls, false, false, false); ;
    break;}
case 40:
#line 279 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-6].i.lineNumber, yyvsp[-5].expr, yyvsp[-3].expr, yyvsp[-1].expr, yyvsp[-2].s.value, NULL, NULL, false, false, false); ;
    break;}
case 41:
#line 281 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-11].i.lineNumber, yyvsp[-10].expr, yyvsp[-7].expr, yyvsp[-4].expr, yyvsp[-5].s.value, yyvsp[-1].odcl.slots, yyvsp[-1].odcl.decls, false, true, false); ;
    break;}
case 42:
#line 283 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-8].i.lineNumber, yyvsp[-7].expr, yyvsp[-4].expr, yyvsp[-1].expr, yyvsp[-2].s.value, NULL, NULL, false, true, false); ;
    break;}
case 43:
#line 285 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-9].i.lineNumber, yyvsp[-8].expr, yyvsp[-6].expr, yyvsp[-4].expr, yyvsp[-5].s.value, yyvsp[-1].odcl.slots, yyvsp[-1].odcl.decls, false, false, true); ;
    break;}
case 44:
#line 287 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-6].i.lineNumber, yyvsp[-5].expr, yyvsp[-3].expr, yyvsp[-1].expr, yyvsp[-2].s.value, NULL, NULL, false, false, true); ;
    break;}
case 45:
#line 292 "cmdgram.y"
{ yyval.s.value = NULL; ;
    break;}
case 46:
#line 294 "cmdgram.y"
{ yyval.s = yyvsp[0].s; ;
    break;}
case 47:
#line 299 "cmdgram.y"
{ yyval.expr = StrConstNode::alloc( CodeBlock::smCurrentParser->getCurrentLine(), "", false); ;
    break;}
case 48:
#line 301 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 49:
#line 306 "cmdgram.y"
{ yyval.expr = NULL; ;
    break;}
case 50:
#line 308 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 51:
#line 313 "cmdgram.y"
{ yyval.odcl.slots = NULL; yyval.odcl.decls = NULL; ;
    break;}
case 52:
#line 315 "cmdgram.y"
{ yyval.odcl.slots = yyvsp[0].slist; yyval.odcl.decls = NULL; ;
    break;}
case 53:
#line 317 "cmdgram.y"
{ yyval.odcl.slots = NULL; yyval.odcl.decls = yyvsp[0].od; ;
    break;}
case 54:
#line 319 "cmdgram.y"
{ yyval.odcl.slots = yyvsp[-1].slist; yyval.odcl.decls = yyvsp[0].od; ;
    break;}
case 55:
#line 324 "cmdgram.y"
{ yyval.od = yyvsp[-1].od; ;
    break;}
case 56:
#line 326 "cmdgram.y"
{ yyvsp[-2].od->append(yyvsp[-1].od); yyval.od = yyvsp[-2].od; ;
    break;}
case 57:
#line 331 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].stmt; ;
    break;}
case 58:
#line 333 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 59:
#line 338 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].ifnode; yyvsp[-1].ifnode->propagateSwitchExpr(yyvsp[-4].expr, false); ;
    break;}
case 60:
#line 340 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].ifnode; yyvsp[-1].ifnode->propagateSwitchExpr(yyvsp[-4].expr, true); ;
    break;}
case 61:
#line 345 "cmdgram.y"
{ yyval.ifnode = IfStmtNode::alloc( yyvsp[-3].i.lineNumber, yyvsp[-2].expr, yyvsp[0].stmt, NULL, false); ;
    break;}
case 62:
#line 347 "cmdgram.y"
{ yyval.ifnode = IfStmtNode::alloc( yyvsp[-6].i.lineNumber, yyvsp[-5].expr, yyvsp[-3].stmt, yyvsp[0].stmt, false); ;
    break;}
case 63:
#line 349 "cmdgram.y"
{ yyval.ifnode = IfStmtNode::alloc( yyvsp[-4].i.lineNumber, yyvsp[-3].expr, yyvsp[-1].stmt, yyvsp[0].ifnode, true); ;
    break;}
case 64:
#line 354 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr;;
    break;}
case 65:
#line 356 "cmdgram.y"
{ (yyvsp[-2].expr)->append(yyvsp[0].expr); yyval.expr=yyvsp[-2].expr; ;
    break;}
case 66:
#line 361 "cmdgram.y"
{ yyval.stmt = IfStmtNode::alloc(yyvsp[-4].i.lineNumber, yyvsp[-2].expr, yyvsp[0].stmt, NULL, false); ;
    break;}
case 67:
#line 363 "cmdgram.y"
{ yyval.stmt = IfStmtNode::alloc(yyvsp[-6].i.lineNumber, yyvsp[-4].expr, yyvsp[-2].stmt, yyvsp[0].stmt, false); ;
    break;}
case 68:
#line 368 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-4].i.lineNumber, nil, yyvsp[-2].expr, nil, yyvsp[0].stmt, false); ;
    break;}
case 69:
#line 370 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-3].i.lineNumber, nil, yyvsp[-1].expr, nil, yyvsp[-4].stmt, true); ;
    break;}
case 70:
#line 375 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-8].i.lineNumber, yyvsp[-6].expr, yyvsp[-4].expr, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 71:
#line 377 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-7].i.lineNumber, yyvsp[-5].expr, yyvsp[-3].expr, NULL, yyvsp[0].stmt, false); ;
    break;}
case 72:
#line 379 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-7].i.lineNumber, yyvsp[-5].expr, NULL, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 73:
#line 381 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-6].i.lineNumber, yyvsp[-4].expr, NULL, NULL, yyvsp[0].stmt, false); ;
    break;}
case 74:
#line 383 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-7].i.lineNumber, NULL, yyvsp[-4].expr, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 75:
#line 385 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-6].i.lineNumber, NULL, yyvsp[-3].expr, NULL, yyvsp[0].stmt, false); ;
    break;}
case 76:
#line 387 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-6].i.lineNumber, NULL, NULL, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 77:
#line 389 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-5].i.lineNumber, NULL, NULL, NULL, yyvsp[0].stmt, false); ;
    break;}
case 78:
#line 394 "cmdgram.y"
{ yyval.stmt = IterStmtNode::alloc( yyvsp[-6].i.lineNumber, yyvsp[-4].s.value, yyvsp[-2].expr, yyvsp[0].stmt, false ); ;
    break;}
case 79:
#line 396 "cmdgram.y"
{ yyval.stmt = IterStmtNode::alloc( yyvsp[-6].i.lineNumber, yyvsp[-4].s.value, yyvsp[-2].expr, yyvsp[0].stmt, true ); ;
    break;}
case 80:
#line 401 "cmdgram.y"
{ yyval.stmt = yyvsp[0].expr; ;
    break;}
case 81:
#line 406 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 82:
#line 408 "cmdgram.y"
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 83:
#line 410 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 84:
#line 412 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 85:
#line 414 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 86:
#line 416 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 87:
#line 418 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 88:
#line 420 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 89:
#line 422 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 90:
#line 424 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 91:
#line 426 "cmdgram.y"
{ yyval.expr = FloatUnaryExprNode::alloc( yyvsp[-1].i.lineNumber, yyvsp[-1].i.value, yyvsp[0].expr); ;
    break;}
case 92:
#line 428 "cmdgram.y"
{ yyval.expr = TTagDerefNode::alloc( yyvsp[-1].i.lineNumber, yyvsp[0].expr ); ;
    break;}
case 93:
#line 430 "cmdgram.y"
{ yyval.expr = TTagExprNode::alloc( yyvsp[0].s.lineNumber, yyvsp[0].s.value ); ;
    break;}
case 94:
#line 432 "cmdgram.y"
{ yyval.expr = ConditionalExprNode::alloc( yyvsp[-4].expr->dbgLineNumber, yyvsp[-4].expr, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 95:
#line 434 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 96:
#line 436 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 97:
#line 438 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 98:
#line 440 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 99:
#line 442 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 100:
#line 444 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 101:
#line 446 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 102:
#line 448 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 103:
#line 450 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 104:
#line 452 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 105:
#line 454 "cmdgram.y"
{ yyval.expr = StreqExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-2].expr, yyvsp[0].expr, true); ;
    break;}
case 106:
#line 456 "cmdgram.y"
{ yyval.expr = StreqExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-2].expr, yyvsp[0].expr, false); ;
    break;}
case 107:
#line 458 "cmdgram.y"
{ yyval.expr = StrcatExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].i.value); ;
    break;}
case 108:
#line 460 "cmdgram.y"
{ yyval.expr = IntUnaryExprNode::alloc(yyvsp[-1].i.lineNumber, yyvsp[-1].i.value, yyvsp[0].expr); ;
    break;}
case 109:
#line 462 "cmdgram.y"
{ yyval.expr = IntUnaryExprNode::alloc(yyvsp[-1].i.lineNumber, yyvsp[-1].i.value, yyvsp[0].expr); ;
    break;}
case 110:
#line 464 "cmdgram.y"
{ yyval.expr = StrConstNode::alloc( yyvsp[0].str.lineNumber, yyvsp[0].str.value, true); ;
    break;}
case 111:
#line 466 "cmdgram.y"
{ yyval.expr = FloatNode::alloc( yyvsp[0].f.lineNumber, yyvsp[0].f.value ); ;
    break;}
case 112:
#line 468 "cmdgram.y"
{ yyval.expr = IntNode::alloc( yyvsp[0].i.lineNumber, yyvsp[0].i.value ); ;
    break;}
case 113:
#line 470 "cmdgram.y"
{ yyval.expr = ConstantNode::alloc( yyvsp[0].i.lineNumber, StringTable->insert("break")); ;
    break;}
case 114:
#line 472 "cmdgram.y"
{ yyval.expr = SlotAccessNode::alloc( yyvsp[0].slot.lineNumber, yyvsp[0].slot.object, yyvsp[0].slot.array, yyvsp[0].slot.slotName ); ;
    break;}
case 115:
#line 474 "cmdgram.y"
{ yyval.expr = InternalSlotAccessNode::alloc( yyvsp[0].intslot.lineNumber, yyvsp[0].intslot.object, yyvsp[0].intslot.slotExpr, yyvsp[0].intslot.recurse); ;
    break;}
case 116:
#line 476 "cmdgram.y"
{ yyval.expr = ConstantNode::alloc( yyvsp[0].s.lineNumber, yyvsp[0].s.value ); ;
    break;}
case 117:
#line 478 "cmdgram.y"
{ yyval.expr = StrConstNode::alloc( yyvsp[0].str.lineNumber, yyvsp[0].str.value, false); ;
    break;}
case 118:
#line 480 "cmdgram.y"
{ yyval.expr = (ExprNode*)VarNode::alloc( yyvsp[0].s.lineNumber, yyvsp[0].s.value, NULL, -1); ;
    break;}
case 119:
#line 482 "cmdgram.y"
{ yyval.expr = (ExprNode*)VarNode::alloc( yyvsp[-3].s.lineNumber, yyvsp[-3].s.value, yyvsp[-1].expr, -1 ); ;
    break;}
case 120:
#line 484 "cmdgram.y"
{
         const U32 bufLen = 64;
         UTF8 buffer[bufLen];
         dSprintf(buffer, bufLen, "__anonymous_function%d", gAnonFunctionID++);
         StringTableEntry fName = StringTable->insert(buffer);
         StmtNode *fndef = FunctionDeclStmtNode::alloc(yyvsp[-6].i.lineNumber, fName, NULL, yyvsp[-4].var, yyvsp[-1].stmt);

         if(!gAnonFunctionList)
            gAnonFunctionList = fndef;
         else
            gAnonFunctionList->append(fndef);

         yyval.expr = StrConstNode::alloc( yyvsp[-6].i.lineNumber, (UTF8*)fName, false );
      ;
    break;}
case 121:
#line 502 "cmdgram.y"
{ yyval.slot.lineNumber = yyvsp[-2].expr->dbgLineNumber; yyval.slot.object = yyvsp[-2].expr; yyval.slot.slotName = yyvsp[0].s.value; yyval.slot.array = NULL; ;
    break;}
case 122:
#line 504 "cmdgram.y"
{ yyval.slot.lineNumber = yyvsp[-5].expr->dbgLineNumber; yyval.slot.object = yyvsp[-5].expr; yyval.slot.slotName = yyvsp[-3].s.value; yyval.slot.array = yyvsp[-1].expr; ;
    break;}
case 123:
#line 509 "cmdgram.y"
{ yyval.intslot.lineNumber = yyvsp[-2].expr->dbgLineNumber; yyval.intslot.object = yyvsp[-2].expr; yyval.intslot.slotExpr = yyvsp[0].expr; yyval.intslot.recurse = false; ;
    break;}
case 124:
#line 511 "cmdgram.y"
{ yyval.intslot.lineNumber = yyvsp[-2].expr->dbgLineNumber; yyval.intslot.object = yyvsp[-2].expr; yyval.intslot.slotExpr = yyvsp[0].expr; yyval.intslot.recurse = true; ;
    break;}
case 125:
#line 516 "cmdgram.y"
{ yyval.expr = ConstantNode::alloc( yyvsp[0].s.lineNumber, yyvsp[0].s.value ); ;
    break;}
case 126:
#line 518 "cmdgram.y"
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 127:
#line 523 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[0].i.lineNumber; yyval.asn.token = '+'; yyval.asn.expr = FloatNode::alloc( yyvsp[0].i.lineNumber, 1 ); ;
    break;}
case 128:
#line 525 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[0].i.lineNumber; yyval.asn.token = '-'; yyval.asn.expr = FloatNode::alloc( yyvsp[0].i.lineNumber, 1 ); ;
    break;}
case 129:
#line 527 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '+'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 130:
#line 529 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '-'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 131:
#line 531 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '*'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 132:
#line 533 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '/'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 133:
#line 535 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '%'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 134:
#line 537 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '&'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 135:
#line 539 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '^'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 136:
#line 541 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '|'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 137:
#line 543 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = opSHL; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 138:
#line 545 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = opSHR; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 139:
#line 550 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 140:
#line 552 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 141:
#line 554 "cmdgram.y"
{ yyval.expr = yyvsp[0].od; ;
    break;}
case 142:
#line 556 "cmdgram.y"
{ yyval.expr = DeclareVarExprNode::alloc( yyvsp[0].s.lineNumber, yyvsp[0].s.value, yyvsp[-1].i.value); ;
    break;}
case 143:
#line 558 "cmdgram.y"
{ yyval.expr = AssignExprNode::alloc( yyvsp[-2].s.lineNumber, yyvsp[-2].s.value, NULL, yyvsp[0].expr); ;
    break;}
case 144:
#line 560 "cmdgram.y"
{ yyval.expr = AssignExprNode::alloc( yyvsp[-5].s.lineNumber, yyvsp[-5].s.value, yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 145:
#line 562 "cmdgram.y"
{ yyval.expr = AssignOpExprNode::alloc( yyvsp[-1].s.lineNumber, yyvsp[-1].s.value, NULL, yyvsp[0].asn.expr, yyvsp[0].asn.token); ;
    break;}
case 146:
#line 564 "cmdgram.y"
{ yyval.expr = AssignOpExprNode::alloc( yyvsp[-4].s.lineNumber, yyvsp[-4].s.value, yyvsp[-2].expr, yyvsp[0].asn.expr, yyvsp[0].asn.token); ;
    break;}
case 147:
#line 566 "cmdgram.y"
{ yyval.expr = SlotAssignOpNode::alloc( yyvsp[-1].slot.lineNumber, yyvsp[-1].slot.object, yyvsp[-1].slot.slotName, yyvsp[-1].slot.array, yyvsp[0].asn.token, yyvsp[0].asn.expr); ;
    break;}
case 148:
#line 568 "cmdgram.y"
{ yyval.expr = SlotAssignNode::alloc( yyvsp[-2].slot.lineNumber, yyvsp[-2].slot.object, yyvsp[-2].slot.array, yyvsp[-2].slot.slotName, yyvsp[0].expr); ;
    break;}
case 149:
#line 570 "cmdgram.y"
{ yyval.expr = SlotAssignNode::alloc( yyvsp[-4].slot.lineNumber, yyvsp[-4].slot.object, yyvsp[-4].slot.array, yyvsp[-4].slot.slotName, yyvsp[-1].expr); ;
    break;}
case 150:
#line 575 "cmdgram.y"
{ yyval.expr = FuncCallExprNode::alloc( yyvsp[-3].s.lineNumber, yyvsp[-3].s.value, NULL, yyvsp[-1].expr, false); ;
    break;}
case 151:
#line 577 "cmdgram.y"
{ yyval.expr = FuncCallExprNode::alloc( yyvsp[-5].s.lineNumber, yyvsp[-3].s.value, yyvsp[-5].s.value, yyvsp[-1].expr, false); ;
    break;}
case 152:
#line 579 "cmdgram.y"
{ yyvsp[-5].expr->append(yyvsp[-1].expr); yyval.expr = FuncCallExprNode::alloc( yyvsp[-5].expr->dbgLineNumber, yyvsp[-3].s.value, NULL, yyvsp[-5].expr, true); ;
    break;}
case 153:
#line 584 "cmdgram.y"
{ yyval.expr = AssertCallExprNode::alloc( yyvsp[-3].i.lineNumber, yyvsp[-1].expr, NULL ); ;
    break;}
case 154:
#line 586 "cmdgram.y"
{ yyval.expr = AssertCallExprNode::alloc( yyvsp[-5].i.lineNumber, yyvsp[-3].expr, yyvsp[-1].str.value ); ;
    break;}
case 155:
#line 591 "cmdgram.y"
{ yyval.expr = NULL; ;
    break;}
case 156:
#line 593 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 157:
#line 598 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 158:
#line 600 "cmdgram.y"
{ (yyvsp[-2].expr)->append(yyvsp[0].expr); yyval.expr = yyvsp[-2].expr; ;
    break;}
case 159:
#line 605 "cmdgram.y"
{ yyval.slist = NULL; ;
    break;}
case 160:
#line 607 "cmdgram.y"
{ yyval.slist = yyvsp[0].slist; ;
    break;}
case 161:
#line 612 "cmdgram.y"
{ yyval.slist = yyvsp[0].slist; ;
    break;}
case 162:
#line 614 "cmdgram.y"
{ yyvsp[-1].slist->append(yyvsp[0].slist); yyval.slist = yyvsp[-1].slist; ;
    break;}
case 163:
#line 619 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc( yyvsp[-3].s.lineNumber, NULL, NULL, yyvsp[-3].s.value, yyvsp[-1].expr); ;
    break;}
case 164:
#line 621 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc( yyvsp[-4].i.lineNumber, NULL, NULL, yyvsp[-3].s.value, yyvsp[-1].expr, yyvsp[-4].i.value); ;
    break;}
case 165:
#line 623 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc( yyvsp[-3].i.lineNumber, NULL, NULL, StringTable->insert("datablock"), yyvsp[-1].expr); ;
    break;}
case 166:
#line 625 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc( yyvsp[-6].s.lineNumber, NULL, yyvsp[-4].expr, yyvsp[-6].s.value, yyvsp[-1].expr); ;
    break;}
case 167:
#line 627 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc( yyvsp[-7].i.lineNumber, NULL, yyvsp[-4].expr, yyvsp[-6].s.value, yyvsp[-1].expr, yyvsp[-7].i.value); ;
    break;}
case 168:
#line 632 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 169:
#line 634 "cmdgram.y"
{ yyval.expr = CommaCatExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 636 "cmdgram.y"


